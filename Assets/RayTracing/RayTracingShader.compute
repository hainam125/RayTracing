#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float2 _PixelOffset;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265;

struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0, 0.0, 0.0, 1.0)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0, 1.0)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
};

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0.0,0.0,0.0);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0,0.0,0.0);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0, 1.0, 0.0);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere) {
    float3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if (p2sqr < 0) return;

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}


RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    IntersectSphere(ray, bestHit, float4(0.0, 3.0, 0.0, 1.0));
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit) {
    if (hit.distance < 1.#INF) {
        return hit.normal * 0.5 + 0.5;
    }
    else {
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5;

        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0 - 1.0);

    Ray ray = CreateCameraRay(uv);
    RayHit hit = Trace(ray);
    float3 result = Shade(ray, hit);

    Result[id.xy] = float4(result, 1.0);
}